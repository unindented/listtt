{"version":3,"sources":["src/App/App.tsx","src/App/AppWithTheme.tsx","src/App/AppWithAppearance.tsx","__generated__/AppEntry.js","web-build/register-service-worker.js"],"names":["App","useTheme","theme","statusBar","colors","colorScheme","forcedDarkColorScheme","forceDarkColorScheme","styles","useMemo","StyleSheet","create","container","flex","alignItems","justifyContent","backgroundColor","bodyBackground","text","color","bodyText","subtext","bodySubtext","switch","flexDirection","SafeAreaView","style","StatusBar","barStyle","Text","View","Switch","value","onValueChange","AppWithTheme","useColorScheme","ThemeProvider","AppWithAppearance","registerRootComponent","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"kMA2DeA,EAhDC,WAAO,IAAD,EAMhBC,cANgB,IAElBC,MAASC,EAFS,EAETA,UAAWC,EAFF,EAEEA,OACpBC,EAHkB,EAGlBA,YACAC,EAJkB,EAIlBA,sBACAC,EALkB,EAKlBA,qBAGIC,EAASC,mBACb,kBACEC,IAAWC,OAAO,CAChBC,UAAW,CACTC,KAAM,EACNC,WAAY,SACZC,eAAgB,SAChBC,gBAAiBZ,EAAOa,gBAE1BC,KAAM,CACJC,MAAOf,EAAOgB,UAEhBC,QAAS,CACPF,MAAOf,EAAOkB,aAEhBC,OAAQ,CACNC,cAAe,WAGrB,CAACpB,IAGH,OACE,kBAACqB,EAAA,EAAD,CAAcC,MAAOlB,EAAOI,WAC1B,kBAACe,EAAA,EAAD,CAAWC,SAAUzB,IACrB,kBAAC0B,EAAA,EAAD,CAAMH,MAAOlB,EAAOU,MAApB,YACA,kBAACW,EAAA,EAAD,CAAMH,MAAOlB,EAAOa,SAApB,iBAA4ChB,GAC3B,SAAhBA,EACC,kBAACyB,EAAA,EAAD,CAAMJ,MAAOlB,EAAOe,QAClB,kBAACM,EAAA,EAAD,CAAMH,MAAOlB,EAAOa,SAApB,6BACA,kBAACU,EAAA,EAAD,CACEC,MAAO1B,EACP2B,cAAe1B,KAGjB,OCtCK2B,EAVU,WACvB,IAAM7B,EAAc8B,2BAEpB,OACE,kBAACC,EAAA,EAAD,CAAe/B,YAAaA,GAC1B,kBAAC,EAAD,QCASgC,EANe,kBAC5B,kBAAC,qBAAD,KACE,kBAAC,EAAD,QCIJC,YAAsBtC,I,4DCTlB,kBAAmBuC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,iCAAkC,CAAEC,MAAO,aACpDC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.9f7c87b0.chunk.js","sourcesContent":["import { useTheme } from \"@listtt/themes\";\nimport React, { FC, useMemo } from \"react\";\nimport {\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Switch,\n  Text,\n  View,\n} from \"react-native\";\n\nconst App: FC = () => {\n  const {\n    theme: { statusBar, colors },\n    colorScheme,\n    forcedDarkColorScheme,\n    forceDarkColorScheme,\n  } = useTheme();\n\n  const styles = useMemo(\n    () =>\n      StyleSheet.create({\n        container: {\n          flex: 1,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          backgroundColor: colors.bodyBackground,\n        },\n        text: {\n          color: colors.bodyText,\n        },\n        subtext: {\n          color: colors.bodySubtext,\n        },\n        switch: {\n          flexDirection: \"row\",\n        },\n      }),\n    [colors]\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={statusBar} />\n      <Text style={styles.text}>Welcome!</Text>\n      <Text style={styles.subtext}>Color scheme: {colorScheme}</Text>\n      {colorScheme !== \"dark\" ? (\n        <View style={styles.switch}>\n          <Text style={styles.subtext}>Force dark color scheme: </Text>\n          <Switch\n            value={forcedDarkColorScheme}\n            onValueChange={forceDarkColorScheme}\n          />\n        </View>\n      ) : null}\n    </SafeAreaView>\n  );\n};\n\nexport default App;\n","import { ThemeProvider } from \"@listtt/themes\";\nimport React, { FC } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport App from \"./App\";\n\nconst AppWithTheme: FC = () => {\n  const colorScheme = useColorScheme();\n\n  return (\n    <ThemeProvider colorScheme={colorScheme}>\n      <App />\n    </ThemeProvider>\n  );\n};\n\nexport default AppWithTheme;\n","import React, { FC } from \"react\";\nimport { AppearanceProvider } from \"react-native-appearance\";\n\nimport AppWithTheme from \"./AppWithTheme\";\n\nconst AppWithAppearance: FC = () => (\n  <AppearanceProvider>\n    <AppWithTheme />\n  </AppearanceProvider>\n);\n\nexport default AppWithAppearance;\n","// @generated by expo-yarn-workspaces\n\nimport { registerRootComponent } from 'expo';\nimport { activateKeepAwake } from 'expo-keep-awake';\n\nimport App from '../App';\n\nif (__DEV__) {\n  activateKeepAwake();\n}\n\nregisterRootComponent(App);\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/listtt/expo-service-worker.js', { scope: '/listtt/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}